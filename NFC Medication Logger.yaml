blueprint:
  name: NFC Medication Logger (up to 4 doses, beta v3)
  description: >
    Track up to 4 daily medication doses using an NFC/RFID tag.
    Valid scans inside a global time window log the dose timestamp, prevent double-logging,
    send contextual push notifications, and (optionally) decrement inventory with low/out alerts.
    Also supports reminders (scheduled time + offset) if a dose was not logged.
  domain: automation

  input:
    # --- Medication metadata ---
    med_name:
      name: Medication Name
      description: >
        Friendly name for the medication.
        Example: "Metformin" or "Vitamin D".
      selector:
        text:

    med_dose:
      name: Dose
      description: >
        The strength or amount per dose.
        Example: "500 mg", "1 tablet", or "2 drops".
      selector:
        text:

    med_directions:
      name: Directions
      description: >
        Caregiver notes or instructions on how to take the medication.
        Example: "Take with food", "Use inhaler before exercise", "Take at bedtime with water".
      selector:
        text:

    # --- Tag + notifications ---
    tag_id:
      name: NFC Tag ID
      description: >
        The ID of the NFC/RFID tag attached to the medication bottle.
        Create/scan tags in Home Assistant (Settings → Tags) and copy the Tag ID.
      selector:
        text:

    notify_service:
      name: Notify Service
      description: >
        The Home Assistant notify service for push alerts.
        Example: "notify.mobile_app_mark_s_phone_2".
      default: notify.mobile_app_mark_s_phone_2
      selector:
        text:

    # --- Global scan window ---
    dose_window:
      name: Global Dose Window (minutes before/after scheduled time)
      description: >
        How many minutes before or after the scheduled time a scan will be accepted.
        Example: 20 → a 9:00 AM dose can be logged between 8:40–9:20.
      default: 20
      selector:
        number:
          min: 0
          max: 120
          step: 1
          unit_of_measurement: minutes

    # --- Dose 1 (required for most setups) ---
    dose1_time:
      name: Dose 1 Scheduled Time (input_datetime)
      description: >
        Input_datetime entity storing the scheduled time of Dose 1 (time-only or date+time).
        Create via: Settings → Devices & Services → Helpers → Date/Time.
        Example: input_datetime.med1_dose1_time
      selector:
        entity:
          domain: input_datetime

    dose1_taken:
      name: Dose 1 Last Taken (input_datetime)
      description: >
        Input_datetime entity storing when Dose 1 was last logged.
        Example: input_datetime.med1_dose1_taken
      selector:
        entity:
          domain: input_datetime

    # --- Dose 2 (optional) ---
    dose2_time:
      name: Dose 2 Scheduled Time (input_datetime)
      description: >
        Input_datetime entity for the scheduled time of Dose 2.
        Leave blank if not used.
      selector:
        entity:
          domain: input_datetime

    dose2_taken:
      name: Dose 2 Last Taken (input_datetime)
      description: >
        Input_datetime entity storing when Dose 2 was last logged.
        Leave blank if not used.
      selector:
        entity:
          domain: input_datetime

    # --- Dose 3 (optional) ---
    dose3_time:
      name: Dose 3 Scheduled Time (input_datetime)
      description: >
        Input_datetime entity for the scheduled time of Dose 3.
        Leave blank if not used.
      selector:
        entity:
          domain: input_datetime

    dose3_taken:
      name: Dose 3 Last Taken (input_datetime)
      description: >
        Input_datetime entity storing when Dose 3 was last logged.
        Leave blank if not used.
      selector:
        entity:
          domain: input_datetime

    # --- Dose 4 (optional) ---
    dose4_time:
      name: Dose 4 Scheduled Time (input_datetime)
      description: >
        Input_datetime entity for the scheduled time of Dose 4.
        Leave blank if not used.
      selector:
        entity:
          domain: input_datetime

    dose4_taken:
      name: Dose 4 Last Taken (input_datetime)
      description: >
        Input_datetime entity storing when Dose 4 was last logged.
        Leave blank if not used.
      selector:
        entity:
          domain: input_datetime

    # --- Reminders ---
    enable_reminders:
      name: Enable Reminders
      description: >
        Turn on reminder notifications if a dose is not logged by its scheduled time + offset.
      default: true
      selector:
        boolean:

    reminder_offset:
      name: Reminder Offset (minutes after scheduled time)
      description: >
        How long after the scheduled time to wait before sending a reminder
        if the dose has not been logged. Example: 30 → 9:00 AM dose reminds at 9:30 AM.
      default: 30
      selector:
        number:
          min: 0
          max: 180
          step: 1
          unit_of_measurement: minutes

    # --- Inventory (optional add-on) ---
    enable_inventory:
      name: Enable Inventory Tracking
      description: >
        When ON, a successful (in-window) scan will decrement inventory
        and send low/out alerts with optional refill context.
      default: true
      selector:
        boolean:

    inventory_entity:
      name: Inventory (remaining units) - input_number
      description: >
        input_number that stores how many units are left.
        Set this to your current count (e.g., 90).
        Example: input_number.metformin_inventory
      selector:
        entity:
          domain: input_number

    units_per_dose:
      name: Units per Dose
      description: >
        How many units to subtract per successful dose (e.g., 1 tablet).
      default: 1
      selector:
        number:
          min: 0
          max: 10
          step: 1

    low_inventory_threshold:
      name: Low Inventory Threshold
      description: >
        When inventory falls to this number or below, send a low-stock alert.
        Example: 10.
      default: 10
      selector:
        number:
          min: 0
          max: 500
          step: 1

    refills_left_entity:
      name: Refills Left (optional) - input_number
      description: >
        input_number storing how many refills remain on the prescription.
        Leave blank if not tracked.
        Example: input_number.metformin_refills_left
      selector:
        entity:
          domain: input_number

    pills_per_refill:
      name: Units per Refill (optional)
      description: >
        For info in alerts (not automated). Example: 90.
      default: 90
      selector:
        number:
          min: 0
          max: 2000
          step: 1

    pharmacy_contact_note:
      name: Pharmacy/Contact Note (optional)
      description: >
        Shown in low/out alerts. Example: "CVS Frederick, (301) 555-1234".
      default: ""
      selector:
        text:

mode: restart

variables:
  v_med_name: !input med_name
  v_med_dose: !input med_dose
  v_med_directions: !input med_directions
  v_notify: !input notify_service
  v_window: !input dose_window

  v_enable_reminders: !input enable_reminders
  v_reminder_offset: !input reminder_offset

  v_inv_enabled: !input enable_inventory
  v_inv_entity: !input inventory_entity
  v_units_per_dose: !input units_per_dose
  v_low_thresh: !input low_inventory_threshold
  v_refills_left_entity: !input refills_left_entity
  v_units_per_refill: !input pills_per_refill
  v_pharmacy_note: !input pharmacy_contact_note

trigger:
  # Tag scan
  - platform: tag
    tag_id: !input tag_id

  # Reminder anchors (we'll delay by reminder_offset after the trigger fires)
  - platform: time
    at: !input dose1_time
    id: dose1_reminder
  - platform: time
    at: !input dose2_time
    id: dose2_reminder
  - platform: time
    at: !input dose3_time
    id: dose3_reminder
  - platform: time
    at: !input dose4_time
    id: dose4_reminder

action:
  - choose:

      # =========================================
      # ========== NFC TAG SCAN BRANCH ==========
      # =========================================
      - conditions:
          - condition: template
            value_template: "{{ trigger.platform == 'tag' }}"
        sequence:
          - variables:
              now_ts: "{{ now() }}"
              today: "{{ now().date() }}"

              # Build dose objects from inputs (skip blanks)
              doses: >
                {%- set ds = [] -%}
                {%- set t1 = iif('\\!input dose1_time' == '', none, ('\\!input dose1_time')) -%}
                {%- set k1 = iif('\\!input dose1_taken' == '', none, ('\\!input dose1_taken')) -%}
                {%- set t2 = iif('\\!input dose2_time' == '', none, ('\\!input dose2_time')) -%}
                {%- set k2 = iif('\\!input dose2_taken' == '', none, ('\\!input dose2_taken')) -%}
                {%- set t3 = iif('\\!input dose3_time' == '', none, ('\\!input dose3_time')) -%}
                {%- set k3 = iif('\\!input dose3_taken' == '', none, ('\\!input dose3_taken')) -%}
                {%- set t4 = iif('\\!input dose4_time' == '', none, ('\\!input dose4_time')) -%}
                {%- set k4 = iif('\\!input dose4_taken' == '', none, ('\\!input dose4_taken')) -%}
                {%- if t1 and k1 %}{% set _ = ds.append({'time': '\\!input dose1_time', 'taken': '\\!input dose1_taken'}) %}{% endif -%}
                {%- if t2 and k2 %}{% set _ = ds.append({'time': '\\!input dose2_time', 'taken': '\\!input dose2_taken'}) %}{% endif -%}
                {%- if t3 and k3 %}{% set _ = ds.append({'time': '\\!input dose3_time', 'taken': '\\!input dose3_taken'}) %}{% endif -%}
                {%- if t4 and k4 %}{% set _ = ds.append({'time': '\\!input dose4_time', 'taken': '\\!input dose4_taken'}) %}{% endif -%}
                {{ ds }}

          - variables:
              # Find the first dose whose window contains now()
              valid_dose: >
                {% set result = none %}
                {% for d in doses %}
                  {% set sched = states(d.time) %}
                  {% if sched not in ['unknown','unavailable',''] %}
                    {% set sched_dt = as_datetime(today ~ ' ' ~ sched) %}
                    {% set win_start = sched_dt - timedelta(minutes=v_window|int) %}
                    {% set win_end = sched_dt + timedelta(minutes=v_window|int) %}
                    {% if now() >= win_start and now() <= win_end %}
                      {% set result = d %}
                      {% break %}
                    {% endif %}
                  {% endif %}
                {% endfor %}
                {{ result }}

          - choose:
              # --- Inside a valid window ---
              - conditions:
                  - condition: template
                    value_template: "{{ valid_dose is not none }}"
                sequence:
                  - variables:
                      taken_str: "{{ states(valid_dose.taken) }}"
                      taken_dt: "{{ as_datetime(taken_str) if taken_str not in ['unknown','unavailable',''] else none }}"
                  - choose:
                      # Already logged today → say when it was taken
                      - conditions:
                          - condition: template
                            value_template: "{{ taken_dt and taken_dt.date() == today }}"
                        sequence:
                          - service: "{{ v_notify }}"
                            data:
                              title: "⚠ Already taken"
                              message: >
                                {{ v_med_name }} ({{ v_med_dose }}) was already taken today at
                                {{ taken_dt.strftime('%-I:%M %p') }}.
                      # First log today → record timestamp + inventory handling
                      - conditions: []
                        sequence:
                          - service: input_datetime.set_datetime
                            target:
                              entity_id: "{{ valid_dose.taken }}"
                            data:
                              datetime: "{{ now_ts }}"
                          - service: "{{ v_notify }}"
                            data:
                              title: "✅ Medication recorded"
                              message: >
                                {{ v_med_name }} ({{ v_med_dose }}) logged at
                                {{ now_ts.strftime('%-I:%M %p') }}.
                                Directions: {{ v_med_directions }}

                          # ----- Inventory handling (optional) -----
                          - choose:
                              - conditions:
                                  - condition: template
                                    value_template: "{{ v_inv_enabled and v_inv_entity is not none and v_inv_entity != '' }}"
                                sequence:
                                  - variables:
                                      current_qty: >
                                        {% set v = states(v_inv_entity) %}
                                        {{ (v | float(0)) if v not in ['unknown','unavailable',''] else 0 }}
                                      subtract: "{{ v_units_per_dose | int }}"
                                      new_qty: >
                                        {% set n = (current_qty | int) - (subtract | int) %}
                                        {{ 0 if n < 0 else n }}

                                  - service: input_number.set_value
                                    target:
                                      entity_id: "{{ v_inv_entity }}"
                                    data:
                                      value: "{{ new_qty }}"

                                  - variables:
                                      refills_left: >
                                        {% if v_refills_left_entity %}
                                          {% set r = states(v_refills_left_entity) %}
                                          {{ (r | int(0)) if r not in ['unknown','unavailable',''] else 0 }}
                                        {% else %} {{ None }} {% endif %}

                                  - choose:
                                      # Out of stock
                                      - conditions:
                                          - condition: template
                                            value_template: "{{ new_qty == 0 }}"
                                        sequence:
                                          - service: "{{ v_notify }}"
                                            data:
                                              title: "⛔ Out of medication"
                                              message: >
                                                {{ v_med_name }} ({{ v_med_dose }}) inventory is now 0.
                                                {% if refills_left is not none %}Refills left: {{ refills_left }}. {% endif %}
                                                {% if v_units_per_refill|int > 0 %}Typical refill: {{ v_units_per_refill }} units. {% endif %}
                                                {{ 'Contact: ' ~ v_pharmacy_note if v_pharmacy_note }}
                                      # Low stock
                                      - conditions:
                                          - condition: template
                                            value_template: "{{ new_qty <= (v_low_thresh | int) and new_qty > 0 }}"
                                        sequence:
                                          - service: "{{ v_notify }}"
                                            data:
                                              title: "⚠ Low medication inventory"
                                              message: >
                                                {{ v_med_name }} ({{ v_med_dose }}) is low: {{ new_qty }} left
                                                (threshold {{ v_low_thresh }}).
                                                {% if refills_left is not none %}Refills left: {{ refills_left }}. {% endif %}
                                                {{ 'Contact: ' ~ v_pharmacy_note if v_pharmacy_note }}

              # --- Outside all windows → tell next dose time ---
              - conditions: []
                sequence:
                  - variables:
                      next_sched: >
                        {% set future = [] %}
                        {% for d in doses %}
                          {% set sched = states(d.time) %}
                          {% if sched not in ['unknown','unavailable',''] %}
                            {% set dt = as_datetime(today ~ ' ' ~ sched) %}
                            {% if dt >= now() %}
                              {% set _ = future.append(dt) %}
                            {% endif %}
                          {% endif %}
                        {% endfor %}
                        {% if future|length > 0 %}
                          {{ future|min }}
                        {% else %}
                          {# no remaining times today → pick the first dose time tomorrow #}
                          {% set first = none %}
                          {% for d in doses %}
                            {% set sched = states(d.time) %}
                            {% if sched not in ['unknown','unavailable',''] %}
                              {% set first = as_datetime(today ~ ' ' ~ sched) + timedelta(days=1) %}
                              {% break %}
                            {% endif %}
                          {% endfor %}
                          {{ first }}
                        {% endif %}
                  - service: "{{ v_notify }}"
                    data:
                      title: "⏳ Not time yet"
                      message: >
                        It's not time for {{ v_med_name }} yet.
                        Next dose at {{ next_sched.strftime('%-I:%M %p') if next_sched else "the next scheduled time" }}.

      # =========================================
      # ============ REMINDER BRANCH ============
      # =========================================
      - conditions:
          - condition: template
            value_template: "{{ trigger.id is match('dose[1-4]_reminder') }}"
          - condition: template
            value_template: "{{ v_enable_reminders }}"
        sequence:
          - variables:
              today: "{{ now().date() }}"
              # Map trigger to the matching 'taken' entity
              dose_taken_entity: >
                {% if trigger.id == 'dose1_reminder' %} \\!input dose1_taken
                {% elif trigger.id == 'dose2_reminder' %} \\!input dose2_taken
                {% elif trigger.id == 'dose3_reminder' %} \\!input dose3_taken
                {% elif trigger.id == 'dose4_reminder' %} \\!input dose4_taken
                {% endif %}
          # wait reminder_offset, then re-check
          - delay:
              minutes: "{{ v_reminder_offset | int }}"
          - variables:
              taken_str: "{{ states(dose_taken_entity) if dose_taken_entity else '' }}"
              taken_dt: "{{ as_datetime(taken_str) if taken_str not in ['unknown','unavailable',''] else none }}"
          - condition: template
            value_template: "{{ not taken_dt or taken_dt.date() != today }}"
          - service: "{{ v_notify }}"
            data:
              title: "💊 Reminder"
              message: >
                Reminder: {{ v_med_name }} ({{ v_med_dose }}) was scheduled but not logged.
                Directions: {{ v_med_directions }}
