blueprint:
  name: NFC Medication Logger (v8 – simplified setup)
  description: |
    💊 **Medication Tracker (Easy Setup)**

    This version focuses on usability: each automation = one medication.

    ✅ Features:
    - Tap an NFC tag to log a dose.
    - Prevents duplicate scans per day.
    - Warns if scanned too early/late (shows next dose).
    - Optional reminders for missed doses.
    - Optional inventory tracking.
    - Works automatically with the Medication Dashboard (entities named "med_*").

    🧭 Setup Steps:
    1. Fill out the form below (no YAML required).
    2. Use the medication name (e.g. "Advil") — it will be used in entity names.
    3. Add the helpers suggested in the description (HA will guide you).
    4. Scan your NFC tag to link it.
    5. That’s it! The dashboard will show your medication automatically.

  domain: automation

  input:
    med_name:
      name: Medication Name
      description: >
        Used to build helper entity names automatically. Example: "Advil" → `med_advil_*`
      selector: { text: {} }

    med_dose:
      name: Dose
      description: e.g., "200 mg", "1 tablet"
      selector: { text: {} }

    med_directions:
      name: Directions
      description: e.g., "Take every 6 hours as needed for pain"
      selector: { text: {} }

    tag_id:
      name: NFC Tag ID
      description: >
        Paste the Tag ID from Settings → Tags. Each medication should have its own tag.
      selector:
        text: {}

    notify_service:
      name: Notify Service
      description: >
        The notify service to send push notifications. Example: `notify.mobile_app_mark_s_phone_2`
      selector:
        text: {}

    dose_window:
      name: Dose Window (minutes before/after scheduled time)
      description: >
        Valid time window around scheduled dose. Example: 20 = +/- 20 minutes.
      default: 20
      selector:
        number:
          min: 0
          max: 120
          step: 1
          unit_of_measurement: minutes

    # --- Doses (inline only for simplicity) ---
    dose1_time:
      name: Dose 1 Time
      selector: { time: {} }
    dose2_time:
      name: Dose 2 Time (optional)
      selector: { time: {} }
    dose3_time:
      name: Dose 3 Time (optional)
      selector: { time: {} }
    dose4_time:
      name: Dose 4 Time (optional)
      selector: { time: {} }

    enable_reminders:
      name: Enable Reminders
      default: true
      selector: { boolean: {} }

    reminder_offset:
      name: Reminder Offset (minutes after scheduled time)
      default: 30
      selector:
        number:
          min: 0
          max: 180
          step: 1
          unit_of_measurement: minutes

    enable_inventory:
      name: Enable Inventory Tracking
      default: false
      selector: { boolean: {} }

    inventory_entity:
      name: Inventory (remaining units)
      description: >
        If tracking inventory, select or create an input_number named `input_number.med_<name>_inventory`.
      selector:
        entity:
          domain: input_number

    low_inventory_threshold:
      name: Low Inventory Threshold
      default: 10
      selector:
        number:
          min: 0
          max: 500
          step: 1

mode: restart

# ========== VARIABLES ==========
variables:
  v_med_name: !input med_name
  v_slug: "{{ v_med_name | lower | replace(' ','_') }}"
  v_med_dose: !input med_dose
  v_med_directions: !input med_directions
  v_notify: !input notify_service
  v_window: !input dose_window

  v_enable_reminders: !input enable_reminders
  v_reminder_offset: !input reminder_offset

  v_inv_enabled: !input enable_inventory
  v_inv_entity: !input inventory_entity
  v_low_thresh: !input low_inventory_threshold

  # Construct entity names automatically
  dose1_time: !input dose1_time
  dose2_time: !input dose2_time
  dose3_time: !input dose3_time
  dose4_time: !input dose4_time

  # "Taken" helpers follow predictable naming pattern
  dose1_taken: "{{ 'input_datetime.med_' ~ v_slug ~ '_dose1_taken' }}"
  dose2_taken: "{{ 'input_datetime.med_' ~ v_slug ~ '_dose2_taken' }}"
  dose3_taken: "{{ 'input_datetime.med_' ~ v_slug ~ '_dose3_taken' }}"
  dose4_taken: "{{ 'input_datetime.med_' ~ v_slug ~ '_dose4_taken' }}"

# ========== TRIGGERS ==========
trigger:
  - platform: tag
    tag_id: !input tag_id

  - platform: time
    at: !input dose1_time
    id: dose1_reminder
  - platform: time
    at: !input dose2_time
    id: dose2_reminder
  - platform: time
    at: !input dose3_time
    id: dose3_reminder
  - platform: time
    at: !input dose4_time
    id: dose4_reminder

# ========== ACTIONS ==========
action:
  - choose:

      # --- NFC Tag Scanned ---
      - conditions:
          - condition: template
            value_template: "{{ trigger.platform == 'tag' }}"
        sequence:
          - variables:
              now_ts: "{{ as_timestamp(now()) }}"
              today: "{{ now().date() }}"
              times: >
                {{ [dose1_time, dose2_time, dose3_time, dose4_time] | reject('in', ['','unknown','unavailable']) | list }}
              doses: >
                {{ [
                  {'t': dose1_time, 'taken': dose1_taken},
                  {'t': dose2_time, 'taken': dose2_taken},
                  {'t': dose3_time, 'taken': dose3_taken},
                  {'t': dose4_time, 'taken': dose4_taken}
                ] }}

          # --- Find matching dose in window ---
          - variables:
              valid_dose: >
                {% set ns = namespace(result=None) %}
                {% for d in doses if d.t %}
                  {% set sched_dt = today_at(d.t) %}
                  {% if sched_dt %}
                    {% set sched_ts = as_timestamp(sched_dt) %}
                    {% set win_start = sched_ts - (v_window|int * 60) %}
                    {% set win_end = sched_ts + (v_window|int * 60) %}
                    {% if now_ts >= win_start and now_ts <= win_end %}
                      {% set ns.result = d %}
                      {% break %}
                    {% endif %}
                  {% endif %}
                {% endfor %}
                {{ ns.result }}

          # --- Inside window ---
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ valid_dose is not none }}"
                sequence:
                  - variables:
                      taken_entity: "{{ valid_dose.taken }}"
                      last_str: "{{ states(taken_entity) }}"
                      last_dt: "{{ as_datetime(last_str) if last_str not in ['unknown','unavailable',''] else none }}"
                  - choose:
                      # Already taken today
                      - conditions:
                          - condition: template
                            value_template: "{{ last_dt and last_dt.date() == today }}"
                        sequence:
                          - service: "{{ v_notify }}"
                            data:
                              title: "⚠ Already taken"
                              message: >
                                {{ v_med_name }} ({{ v_med_dose }}) already taken today at
                                {{ last_dt.strftime('%-I:%M %p') }}.
                      # First scan today
                      - conditions: []
                        sequence:
                          - service: input_datetime.set_datetime
                            target:
                              entity_id: "{{ taken_entity }}"
                            data:
                              datetime: "{{ now() }}"
                          - service: "{{ v_notify }}"
                            data:
                              title: "✅ Dose logged"
                              message: >
                                {{ v_med_name }} ({{ v_med_dose }}) logged at {{ as_local(now()).strftime('%-I:%M %p') }}.
                                Directions: {{ v_med_directions }}

                          # --- Inventory tracking ---
                          - choose:
                              - conditions:
                                  - condition: template
                                    value_template: "{{ v_inv_enabled and v_inv_entity }}"
                                sequence:
                                  - variables:
                                      current: "{{ states(v_inv_entity) | int(0) }}"
                                      new: "{{ (current - 1) | max(0) }}"
                                  - service: input_number.set_value
                                    target:
                                      entity_id: "{{ v_inv_entity }}"
                                    data:
                                      value: "{{ new }}"
                                  - choose:
                                      - conditions:
                                          - condition: template
                                            value_template: "{{ new == 0 }}"
                                        sequence:
                                          - service: "{{ v_notify }}"
                                            data:
                                              title: "⛔ Out of medication"
                                              message: >
                                                {{ v_med_name }} inventory is now 0. Please refill.
                                      - conditions:
                                          - condition: template
                                            value_template: "{{ new <= v_low_thresh and new > 0 }}"
                                        sequence:
                                          - service: "{{ v_notify }}"
                                            data:
                                              title: "⚠ Low medication inventory"
                                              message: >
                                                {{ v_med_name }} running low: {{ new }} units left (threshold {{ v_low_thresh }}).

              # --- Outside window ---
              - conditions: []
                sequence:
                  - variables:
                      future: >
                        {% set f = [] %}
                        {% for t in times if t %}
                          {% set dt = today_at(t) %}
                          {% if dt >= now() %}
                            {% set _ = f.append(dt) %}
                          {% endif %}
                        {% endfor %}
                        {{ f|min if f else none }}
                      next_fmt: >
                        {% if future %}
                          {{ as_local(future).strftime('%-I:%M %p') }}
                        {% else %}
                          tomorrow {{ as_local(today_at(times|min) + timedelta(days=1)).strftime('%-I:%M %p') }}
                        {% endif %}
                  - service: "{{ v_notify }}"
                    data:
                      title: "⏳ Not time yet"
                      message: >
                        It's not time for {{ v_med_name }} yet.
                        Next dose at {{ next_fmt }}.

      # --- Reminder branch ---
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.id in ['dose1_reminder','dose2_reminder','dose3_reminder','dose4_reminder'] and v_enable_reminders }}
        sequence:
          - delay:
              minutes: "{{ v_reminder_offset | int }}"
          - service: "{{ v_notify }}"
            data:
              title: "💊 Reminder"
              message: >
                Reminder: {{ v_med_name }} ({{ v_med_dose }}) scheduled but not logged.
                Directions: {{ v_med_directions }}
